# Default values for et-receiver.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1
maxSurge: 100%
maxUnavailable: 0

image:
  registry: docker.io
  repository: harness/et-receiver-signed
  pullPolicy: IfNotPresent
  tag: "5.3.0"
  digest: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

waitForInitContainer:
  image:
    registry: docker.io
    repository: harness/helm-init-container
    pullPolicy: IfNotPresent
    tag: "latest"
    digest: ""

# Postgres secret value and key
postgresPassword:
  name: postgres
  key: postgres-password

livenessProbe:
  enabled: true
  initialDelaySeconds: 40
  periodSeconds: 10
  failureThreshold: 3
  successThreshold: 1
  timeoutSeconds: 1

startupProbe:
  enabled: true
  initialDelaySeconds: 40
  periodSeconds: 10
  failureThreshold: 10
  successThreshold: 1
  timeoutSeconds: 1

readinessProbe:
  enabled: true
  initialDelaySeconds: 35
  periodSeconds: 5
  failureThreshold: 3
  successThreshold: 1
  timeoutSeconds: 1

# serviceAccount:
#   # Specifies whether a service account should be created
#   create: true
#   # Annotations to add to the service account
#   annotations: {}
#   # The name of the service account to use.
#   # If not set and create is true, a name is generated using the fullname template
#   name: ""

# Temp Hack to solve the following, will be fix soon .
#   User "system:serviceaccount:harness-1:harness-et-service" cannot list resource "pods" in API group "" in the namespace "harness-1"
serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "harness-default"
podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 9191

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
      - path: /
        backend:
          serviceName: chart-example.local
          servicePort: 9191
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  limits:
    cpu: 2
    memory: 2Gi
  requests:
    cpu: 100m
    memory: 2Gi

autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

et:
  logLevel: INFO
  redis:
    host: redis-gcp
    port: 6379
    trimCronExpression: "@hourly"
    streamLength: 500
     # <+serviceConfig.serviceDefinition.spec.variables.STREAM_LENGTH>
  redisQueue:
    type: hit
      # <+serviceConfig.serviceDefinition.spec.variables.RECEIVER_TYPE>

  # rabbitQueue:
  #   # Receiver type: agent,hit,decompiler,sql, or custom.
  #   # Custom must set customSetting value (i.e: mysql,msg_rabbit,decompile,hit).
  #   type: hit
  #   customType: ""

  hikari:
    maximumPoolSize: 10
    connectionTimeout: 60000

env:
  config:
    DB_TYPE: postgresql
    DB_URL: postgresql:5432
    DB_USER: postgres
    JVM_HEAPSIZE: "1600m"
