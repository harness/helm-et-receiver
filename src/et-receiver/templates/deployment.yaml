apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "et-receiver.fullname" . }}
  labels:
    {{- include "et-receiver.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "et-receiver.selectorLabels" . | nindent 6 }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{.Values.maxSurge}}
      maxUnavailable: {{.Values.maxUnavailable}}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "et-receiver.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "et-receiver.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}

      initContainers:
      - name: check-for-mysql
        image: {{ .Values.initContainers.check.image.repository}}:{{.Values.initContainers.check.image.tag}}
        command: ["sh","-c"]
        args: ['while ! nc -z mysql-gcp:3306 2>/dev/null; do let elapsed=elapsed+1; if [ "$elapsed" -gt 90 ]; then echo "waiting"; exit 1; fi; sleep 1; done; echo "mysql is ready" ']

      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: {{ include "common.images.image" (dict "imageRoot" .Values.image "global" .Values.global) }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 9191
              protocol: TCP

          {{- if or .Values.env.config .Values.env.secrets}}
          envFrom:
          {{- if .Values.env.config}}
          - configMapRef:
              name: {{ include "et-receiver.fullname" . }}
          {{- end}}
          {{- if .Values.env.secrets}}
          - secretRef:
              name: {{ include "et-receiver.fullname" . }}
          {{- end}}
          {{- end}}

          # This is a temporary way to pass the db passwords
          env:
          - name: DB_PASS
            valueFrom:
              secretKeyRef:
                name: overops-secret
                key: db-password

          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: http
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          {{- end }}

          {{- if .Values.startupProbe.enabled }}
          startupProbe:
            httpGet:
              path: /actuator/health/liveness
              port: http
            initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
            successThreshold: {{ .Values.startupProbe.successThreshold }}
            timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
          {{- end }}

          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: http
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          {{- end }}

          resources:
            {{- toYaml .Values.resources | nindent 12 }}

          volumeMounts:
          - mountPath: /opt/overops/private
            name: et-private

      volumes:
      - name: et-private
        configMap:
          name: {{ include "et-receiver.fullname" . }}-config
          items:
          - key: application.properties
            path: application.properties
          - key: application-mysql.properties
            path: application-mysql.properties
          - key: application-msg_redis.properties
            path: application-msg_redis.properties

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
